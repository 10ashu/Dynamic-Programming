class Solution {
public:
    int rec(vector<int>& nums,int n)
    {
        if(n==0)
        return nums[0];
        if(n<0)
        return 0;
        int include=rec(nums,n-2)+nums[n];
        int exclude=rec(nums,n-1)+0;
        return max(include,exclude);
    } 
    int memoization(vector<int>& nums,int n,vector<int>& dp)
    {
        if(n==0)
        return nums[0];
        if(n<0)
        return 0;
        if(dp[n]!=-1)
        return dp[n];
        int include=memoization(nums,n-2,dp)+nums[n];
        int exclude=memoization(nums,n-1,dp)+0;
        dp[n]=max(include,exclude);
        return dp[n];
    }
    int tabulation(vector<int>& nums,int n)
    {
        vector<int> dp(n+1,-1);
        dp[0]=nums[0];
        for(int i=1;i<=n;i++)
        {
            int temp=0;
            if(i-2>=0)
              temp=dp[i-2];
            int include=temp+nums[i];
            int exclude=dp[i-1]+0;
            dp[i]=max(include,exclude);
        }
        return dp[n];
    }
    int spaceoptimization(vector<int>& nums,int n)
    {
       int  pre2=0;
       int pre1=nums[0];
       int curr;
        for(int i=1;i<=n;i++)
        {
            int temp=0;
            if(i-2>=0)
            temp=pre2;
            int include=temp+nums[i];
            int exclude=pre1+0;
            curr=max(include,exclude);
            pre2=pre1;
            pre1=curr;
        }
        return pre1;
    }
    int rob(vector<int>& nums) {
        // int n=nums.size()-1;
        // int ans=rec(nums,n);
        // return ans;
        // int n=nums.size()-1;
        // vector<int> dp(n+1,-1);
        // int ans=memoization(nums,n,dp);
        // return ans;
        // int n=nums.size()-1;
        // int ans=tabulation(nums,n);
        // return ans;
        int n=nums.size()-1;
        int ans=spaceoptimization(nums,n);
        return ans;
    }
};
