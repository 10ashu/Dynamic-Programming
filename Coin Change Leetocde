class Solution {
public:
// Top Down DP // Memoization
   int topdowndp(vector<int>& coins,int amount,vector<int>& dp)
   {
       if(amount==0)
       return 0;
       if(amount<0)
       return INT_MAX;
       if(dp[amount]!=-1)
       return dp[amount];
       int mini=INT_MAX;
       for(int i=0;i<coins.size();i++)
       {
           int ans=topdowndp(coins,amount-coins[i],dp);
           if(ans!=INT_MAX)
           mini=min(mini,ans+1);
       }
       dp[amount]=mini;
       return dp[amount];
   } 
//  Bottom Up Solution// Tabulation Method
   int tabulation(vector<int>& coins,int amount)
   {
       vector<int> dp(amount+1,INT_MAX);
       dp[0]=0;
       for(int target=1;target<=amount;target++)
       {
            int mini=INT_MAX;
           for(int i=0;i<coins.size();i++)
           {
          
               if(target-coins[i]>=0){
               int ans=dp[target-coins[i]];
           if(ans!=INT_MAX)
           mini=min(mini,ans+1);
           }
           }
           dp[target]=mini;
       }
       return dp[amount];
   }
// Recursive Solution
   int solverec(vector<int>& coins,int amount)
   {
       if(amount==0)
       return 0;
       if(amount<0)
       return INT_MAX;
       int mini=INT_MAX;
       for(int i=0;i<coins.size();i++)
       {
           int ans=solverec(coins,amount-coins[i]);
           if(ans!=INT_MAX)
           mini=min(mini,ans+1);
       }
       return mini;
   }
    int coinChange(vector<int>& coins, int amount) {
        // int ans=solverec(coins,amount);
        // if(ans==INT_MAX)
        // return -1;
        // else
        // return ans;
        // vector<int> dp(amount+1,-1);
        // int ans=topdowndp(coins,amount,dp);
        // if(ans==INT_MAX)
        // return -1;
        // else
        // return ans;
        int ans=tabulation(coins,amount);
        if(ans==INT_MAX)
        return -1;
        else
        return ans;
    }
};
