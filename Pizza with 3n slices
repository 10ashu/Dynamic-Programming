class Solution {
public:
//    int rec(int index,int end,vector<int>& slices,int k)
//    {
//        if(index>end||k==0)
//        return 0;
//        int include=slices[index]+rec(index+2,end,slices,k-1);
//        int exclude=0+rec(index+1,end,slices,k);
//        return max(include,exclude);
//    }
//     int memo(int index,int end,vector<int>& slices,int k,vector<vector<int>> &dp)
//    {
//        if(index>end||k==0)
//        return 0;
//        if(dp[index][k]!=-1)
//        return dp[index][k];
//        int include=slices[index]+memo(index+2,end,slices,k-1,dp);
//        int exclude=0+memo(index+1,end,slices,k,dp);
//        return dp[index][k]=max(include,exclude);
//    }
   int tab1(vector<int>& slices)
   {
      int n=slices.size();
      vector<vector<int>> dp(n+5,vector<int> (n+5,0));
      for(int index=n-2;index>=0;index--)
      {
          for(int k=1;k<=n/3;k++)
          {
                int include=slices[index]+dp[index+2][k-1];
                 int exclude=0+dp[index+1][k];
                 dp[index][k]=max(include,exclude);
          }
      }
      return dp[0][n/3];
   }
   int tab2(vector<int>& slices)
   {
       int n=slices.size();
      vector<vector<int>> dp(n+5,vector<int> (n+5,0));
      for(int index=n-1;index>=1;index--)
      {
          for(int k=1;k<=n/3;k++)
          {
                int include=slices[index]+dp[index+2][k-1];
                 int exclude=0+dp[index+1][k];
                 dp[index][k]=max(include,exclude);
          }
      }
      return dp[1][n/3];
   }
    int SO1(vector<int>& slices)
   {
      int n=slices.size();
      vector<int> pre(n+1,0);
      vector<int> curr(n+1,0);
      vector<int> next(n+1,0);
      for(int index=n-2;index>=0;index--)
      {
          for(int k=1;k<=n/3;k++)
          {
                int include=slices[index]+next[k-1];
                 int exclude=0+curr[k];
                 pre[k]=max(include,exclude);
          }
        
         next=curr;
          curr=pre;
      }
      return curr[n/3];
   }
     int SO2(vector<int>& slices)
   {
      int n=slices.size();
      vector<int> pre(n+1,0);
      vector<int> curr(n+1,0);
      vector<int> next(n+1,0);
      for(int index=n-1;index>=1;index--)
      {
          for(int k=1;k<=n/3;k++)
          {
                int include=slices[index]+next[k-1];
                 int exclude=0+curr[k];
                 pre[k]=max(include,exclude);
          }
           next=curr;
          curr=pre;
      }
      return curr[n/3];
   }
    int maxSizeSlices(vector<int>& slices) {
        // int n=slices.size();
        // int k=n/3;
        // int ans1=rec(0,n-2,slices,k);
        // int ans2=rec(1,n-1,slices,k);
        // vector<vector<int>> dp1(n,vector<int> (n,-1));
        //  vector<vector<int>> dp2(n,vector<int> (n,-1));
        //  int ans1=memo(0,n-2,slices,k,dp1);
        //  int ans2=memo(1,n-1,slices,k,dp2);
        // int ans1=tab1(slices);
        // int ans2=tab2(slices);
        int ans1=SO1(slices);
        int ans2=SO2(slices);
        return max(ans1,ans2);
    }
};
