class Solution {
public:


// Recursive Solution


int recsolve(int n)
{
    if(n==0||n==1)
    return n;
    int ans=recsolve(n-1)+recsolve(n-2);
    return ans;
}

// Top down Dynamic Programming//Memoization

int topdowndp(vector<int> &dp,int n)
{ 
       if(n==0||n==1)
       return n;
       if(dp[n]!=-1)
       return dp[n];
       dp[n]=topdowndp(dp,n-2)+topdowndp(dp,n-1);
       return dp[n];
}

// Bottom Up Dynamic Programming /Tabulation 


int bottomupdp(int n)
{
    vector<int> dp(n+1,-1);
    dp[0]=0;
    if(n==0)
    return dp[0];
    dp[1]=1;
    for(int i=2;i<=n;i++)
    {
        dp[i]=dp[i-2]+dp[i-1];
    }
    return dp[n];
}

//  Space Optimized Solution 

int spaceoptimization(int &n)
{
    // Look for pattern
    int pre2=0;
    if(n==0)
    return pre2;
    int pre1=1;
    int curr=pre2+pre1;
    for(int i=2;i<=n;i++)
    {
        curr=pre2+pre1;
        pre2=pre1;
        pre1=curr;
    }
    return curr;
}
    int fib(int n) {
        // int ans=recsolve(n);
        // return ans;
        // vector<int> dp(n+1,-1);
        // int ans=topdowndp(dp,n);
        // return ans;
        // int ans=bottomupdp(n);
        // return ans;
        int ans=spaceoptimization(n);
        return ans;
    }
};
