class Solution {
public:
    int rec(vector<int>& values,int i,int j)
    {
       if(i+1==j)
       return 0;
       int ans=INT_MAX;
       for(int k=i+1;k<j;k++)
       { 
          ans=min(ans,values[i]*values[k]*values[j]+rec(values,i,k)+rec(values,k,j));
       }
       return ans;
    }
    int memo(vector<int>& values,int i,int j,vector<vector<int>> &dp)
    {
         if(i+1==j)
          return 0;
          if(dp[i][j]!=-1)
          return dp[i][j];
          int ans=INT_MAX;
          for(int k=i+1;k<j;k++)
          {
              ans=min(ans,values[i]*values[j]*values[k]+memo(values,i,k,dp)+memo(values,k,j,dp));
          }
          dp[i][j]=ans;
          return dp[i][j];
    }
    int tab(vector<int>& v)
    {
        int n=v.size();
         vector<vector<int>> dp(n+1,vector<int> (n+1,0));
         for(int i=n-1;i>=0;i--)
         {
             for(int j=i+2;j<n;j++)
             {
                  int ans=INT_MAX;
                  for(int k=i+1;k<j;k++)
                 {
                   ans=min(ans,v[i]*v[j]*v[k]+dp[i][k]+dp[k][j]);
                  }
                 dp[i][j]=ans;
             }
         }
         return dp[0][n-1];
    }
    int minScoreTriangulation(vector<int>& values) {
        int n=values.size();
        // int ans=rec(values,0,n-1);
        // return ans;
        // vector<vector<int>> dp(n+1,vector<int> (n+1,-1));
        // int ans=memo(values,0,n-1,dp);
        // return ans;
        int ans=tab(values);
        return ans;
    }
};
