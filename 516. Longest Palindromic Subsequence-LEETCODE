class Solution {
public:
    int rec(int i,int j,string a,string b)
    {
        if(i>=a.length())
        return 0;
        if(j>=b.length())
        return 0;
        int ans=0;
        if(a[i]==b[j])
        ans =1+rec(i+1,j+1,a,b);
        else
        ans= 0+(max(rec(i+1,j,a,b),rec(i,j+1,a,b)));
       return ans;
    }
     int SO(string& a,string& b)
    {
        
      vector<int> pre(b.length()+1,0);
      vector<int> curr(b.length()+1,0);
        int n1=a.length()-1;
        int n2=b.length()-1;
        for(int i=n1;i>=0;i--)
        {
            for(int j=n2;j>=0;j--)
            {
                   int ans=0;
               if(a[i]==b[j])
               ans= 1+curr[j+1];
               else
               ans=0+max(curr[j],pre[j+1]);
               pre[j]=ans;
            }
            curr=pre;
        }
        return pre[0];
    }
    int longestPalindromeSubseq(string s) {
        string s1=s;
        reverse(s.begin(),s.end());
        string s2=s;
        int i=0,j=0;
        // int ans=rec(i,j,s1,s2);
    
        // return ans;
        int ans=SO(s1,s2);
        return ans;
    }
};
